name: charmed-kafka
base: core22
version: '3.4.1'
summary: Apache Kafka in a snap.
description: |
  This is a snap that bundles Apache Kafka together with other tools of its ecosystem in order to be used in Charmed Operators, providing automated operations management from day 0 to day 2 on the Apache Kafka real-time stream processing, on top of a Virtual Machine cluster and K8s cluster. It is an open source, end-to-end, production ready data platform on top of cloud native technologies.
grade: stable
confinement: strict

system-usernames:
  snap_daemon: shared

hooks:
  install:
    plugs:
      - network
      - network-bind

environment:
  JAVA_HOME: $SNAP/usr/lib/jvm/java-17-openjdk-amd64
  LOG_DIR: $SNAP_COMMON/var/log/kafka

slots:
  logs:
    interface: content
    source:
      read:
        - $SNAP_COMMON/var/log/kafka

apps:
  daemon:
    command: opt/kafka/start-wrapper.bash
    daemon: simple
    install-mode: disable
    plugs:
      - network
      - network-bind
      - removable-media
  log-dirs:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-log-dirs.sh
  storage:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: storage.sh
  consumer-perf-test:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-consumer-perf-test.sh
  producer-perf-test:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-producer-perf-test.sh
  configs:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-configs.sh
  topics:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-topics.sh
  console-consumer:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-console-consumer.sh
  console-producer:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-console-producer.sh
  consumer-groups:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-consumer-groups.sh
  get-offsets:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-get-offsets.sh
  reassign-partitions:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-reassign-partitions.sh
  replica-verification:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-replica-verification.sh
  zookeeper-shell:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: zookeeper-shell.sh
  run-class:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-run-class.sh
  kafka-streams-application-reset:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-streams-application-reset.sh
  transactions:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-transactions.sh
  leader-election:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-leader-election.sh
  dump-log:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-dump-log.sh
  acls:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-acls.sh
  cluster:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-cluster.sh
  verifiable-consumer:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-verifiable-consumer.sh
  verifiable-producer:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: kafka-verifiable-producer.sh
  trogdor:
    command: opt/kafka/bin-wrapper.bash
    plugs:
      - network
      - network-bind
    environment:
      bin_script: trogdor.sh

parts:
  kafka:
    plugin: nil
    source: https://downloads.apache.org/kafka/${SNAPCRAFT_PROJECT_VERSION}/kafka_2.13-${SNAPCRAFT_PROJECT_VERSION}.tgz
    stage-packages:
    - openjdk-17-jre-headless
    - util-linux
    - libpsl5
    - curl
    override-build: |
      snapcraftctl build
      cp -r ./* $SNAPCRAFT_PART_INSTALL
    override-prime: |
      snapcraftctl prime
      rm -vf usr/lib/jvm/java-17-openjdk-amd64/lib/security/cacerts
      mkdir -p $SNAPCRAFT_PART_INSTALL/opt/kafka
  prometheus-exporter:
    plugin: nil
    after: [kafka]
    override-build: |
      curl -o jmx_prometheus_javaagent.jar "https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.17.0/jmx_prometheus_javaagent-0.17.0.jar"
      EXPECTED_SHA="48ab23a7514f9de5d2ca0acbb8ed1573b3c2ecbef7c5dc4d37c4ba125e538199"
      JAR_SHA=$(sha256sum jmx_prometheus_javaagent.jar | cut -d " " -f1)
      if [ $JAR_SHA != $EXPECTED_SHA ]; then exit 1; fi
      cp jmx_prometheus_javaagent.jar $SNAPCRAFT_PART_INSTALL/
    organize:
      jmx_prometheus_javaagent.jar: opt/kafka/jmx_prometheus_javaagent.jar
  wrapper:
    plugin: dump
    source: snap/local
